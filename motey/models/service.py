import uuid


class Service(object):
    """
    Model object. Represent a service.
    A service can have multiple states, action types and service types.
    """

    class ServiceState(object):
        """
        Enum with service states.
         * INITIAL
         * INSTANTIATING
         * RUNNING
         * STOPPING
         * TERMINATED
         * ERROR
        """
        INITIAL = 0
        INSTANTIATING = 1
        RUNNING = 2
        STOPPING = 3
        TERMINATED = 4
        ERROR = 5

    class ServiceAction(object):
        """
        Enum with action types.
         * ADD
         * REMOVE
        """
        ADD = 'add'
        REMOVE = 'remove'

    class ServiceType(object):
        """
        Enum with service types.
         * MASTER
         * SLAVE
        """
        MASTER = 'master'
        SLAVE = 'slave'

    def __init__(self, name, images, id=uuid.uuid4().hex, state=ServiceState.INITIAL, action=ServiceAction.ADD,
                 node_type=ServiceType.MASTER):
        """
        Constructor of the service model.

        :param name: the name of the service
        :type name: str
        :param images: list of images which are asociated with the service
        :type images: list
        :param id: autogenerated id of the service
        :type id: uuid
        :param state: current state of the service. Default `INITIAL`.
        :type state: motey.models.service.Service.ServiceState
        :param action: action type of the service. Default `ADD`.
        :type action: motey.models.service.Service.ServiceAction
        :param node_type: node type of the service. Default `MASER`.
        :type node_type: motey.models.service.Service.ServiceType
        """

        self.id = id
        self.state = state
        self.action = action
        self.name = name
        self.images = images
        self.node_type = node_type
